<style>
    body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    }

    #chartdiv1 {
        width: 100%;
        height: 400px;
    }

    #chartdiv2 {
        width: 100%;
        height: 400px;
    }

    #chartdiv3 {
        width: 100%;
        height: 400px;
    }

    #chartdiv4 {
        width: 100%;
        height: 400px;
    }
</style>



<%- include('_header'); -%>

    <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/map.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    <script src="https://cdn.amcharts.com/lib/5/percent.js"></script>



    <h1>World Map</h1>
    <div id="chartdiv1"></div>
    <h1>Countries</h1>
    <div id="chartdiv2"></div>
    <h1>OS Versions</h1>
    <div id="chartdiv3"></div>
    <h1>Errors</h1>
    <div id="chartdiv4"></div>



    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>



    <div id="mydiv" data-test=<%=s3data %>></div>



    <body onLoad="buildHtmlTable('#excelDataTable')">
        <table id="excelDataTable" border="1" style="width: 100%;">
        </table>
    </body>




    <%- include('_footer'); -%>


        <script>
            // GLOBAL VARS
            var usaCount = 0;
            var irishCount = 0;


            var os8Count = 0;
            var os9Count = 0;
            var os10Count = 0;
            var os11Count = 0;
            var os12Count = 0;


            var nullPointerCount = 0;
            var error503Count = 0;
            //

            // TABLE CREATION

            var array = document.getElementById('mydiv').dataset.test

            console.log("array: " + array);

            var parsedS3Array = [];

            var jsonData = JSON.parse(array);

            for (var i = 0; i < jsonData.length; i++) {
                var obj = jsonData[i];



                const s3SplitFileObject = new Object();
                s3SplitFileObject.userId = '<a href="http://localhost:3000/users?user=' + obj.userId + '&deviceType=' + obj.deviceType + '&deviceVersion=' + obj.deviceVersion + '&country=' + obj.country + '&latitude=' + obj.latitude + '&longitude=' + obj.longitude + '&exception=' + obj.exception + '&timestamp=' + obj.timestamp + '">' + obj.userId + '</a>';
                s3SplitFileObject.deviceType = obj.deviceType
                s3SplitFileObject.deviceVersion = obj.deviceVersion
                if (obj.deviceVersion == '8') {
                    os8Count = os8Count + 1;
                } else if (obj.deviceVersion == '9') {
                    os9Count = os9Count + 1;
                } else if (obj.deviceVersion == '10') {
                    os10Count = os10Count + 1;
                } else if (obj.deviceVersion == '11') {
                    os11Count = os11Count + 1;
                } else if (obj.deviceVersion == '12') {
                    os12Count = os12Count + 1;
                }

                s3SplitFileObject.country = obj.country

                if (obj.country == 'ireland') {
                    irishCount = irishCount + 1;
                }

                if (obj.country == 'united~states') {
                    usaCount = usaCount + 1;
                }

                s3SplitFileObject.latitude = obj.latitude
                s3SplitFileObject.longitude = obj.longitude
                s3SplitFileObject.exception = obj.exception

                if (obj.exception == '503') {
                    error503Count = error503Count + 1;
                } else {
                    nullPointerCount = nullPointerCount + 1;
                }

                s3SplitFileObject.timestamp = obj.timestamp

                parsedS3Array.push(s3SplitFileObject)

            }

            // Builds the HTML Table out of myList.
            function buildHtmlTable(selector) {

                //console.log("array in function: " + parsedS3Array)
                var columns = addAllColumnHeaders(parsedS3Array, selector);

                for (var i = 0; i < parsedS3Array.length; i++) {
                    var row$ = $('<tr/>');
                    for (var colIndex = 0; colIndex < columns.length; colIndex++) {
                        var cellValue = parsedS3Array[i][columns[colIndex]];
                        if (cellValue == null) cellValue = "";
                        row$.append($('<td/>').html(cellValue));
                    }
                    $(selector).append(row$);
                }
            }

            // Adds a header row to the table and returns the set of columns.
            // Need to do union of keys from all records as some records may not contain
            // all records.
            function addAllColumnHeaders(parsedS3Array, selector) {
                var columnSet = [];
                var headerTr$ = $('<tr/>');

                for (var i = 0; i < parsedS3Array.length; i++) {
                    var rowHash = parsedS3Array[i];
                    for (var key in rowHash) {
                        if ($.inArray(key, columnSet) == -1) {
                            columnSet.push(key);
                            headerTr$.append($('<th/>').html(key));
                        }
                    }
                }
                $(selector).append(headerTr$);

                return columnSet;
            }
            // END OF TABLE CREATION
            // -----------------------
            // -----------------------




            //-------------------------------
            // MAP AREA
            //------------------------------

            var data = [
                {
                    id: "US",
                    name: "United States",
                    value: usaCount
                }, {
                    id: "IE",
                    name: "Ireland",
                    value: irishCount
                }
            ];

            var root = am5.Root.new("chartdiv1");
            root.setThemes([am5themes_Animated.new(root)]);

            var chart = root.container.children.push(am5map.MapChart.new(root, {}));

            var polygonSeries = chart.series.push(
                am5map.MapPolygonSeries.new(root, {
                    geoJSON: am5geodata_worldLow,
                    exclude: ["AQ"]
                })
            );

            var bubbleSeries = chart.series.push(
                am5map.MapPointSeries.new(root, {
                    valueField: "value",
                    calculateAggregates: true,
                    polygonIdField: "id"
                })
            );

            var circleTemplate = am5.Template.new({});

            bubbleSeries.bullets.push(function (root, series, dataItem) {
                var container = am5.Container.new(root, {});

                var circle = container.children.push(
                    am5.Circle.new(root, {
                        radius: 20,
                        fillOpacity: 0.7,
                        fill: am5.color(0xff0000),
                        cursorOverStyle: "pointer",
                        tooltipText: `{name}: [bold]{value}[/]`
                    }, circleTemplate)
                );

                var countryLabel = container.children.push(
                    am5.Label.new(root, {
                        text: "{name}",
                        paddingLeft: 5,
                        populateText: true,
                        fontWeight: "bold",
                        fontSize: 13,
                        centerY: am5.p50
                    })
                );

                circle.on("radius", function (radius) {
                    countryLabel.set("x", radius);
                })

                return am5.Bullet.new(root, {
                    sprite: container,
                    dynamic: true
                });
            });

            bubbleSeries.bullets.push(function (root, series, dataItem) {
                return am5.Bullet.new(root, {
                    sprite: am5.Label.new(root, {
                        text: "{value.formatNumber('#.')}",
                        fill: am5.color(0xffffff),
                        populateText: true,
                        centerX: am5.p50,
                        centerY: am5.p50,
                        textAlign: "center"
                    }),
                    dynamic: true
                });
            });


            bubbleSeries.data.setAll(data);

            // ------------------------
            // END OF MAP AREAD
            // ------------------------




            //-------------------------------
            // PIE CHART Countries
            //------------------------------

            // Create root element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root = am5.Root.new("chartdiv2");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root.setThemes([
                am5themes_Animated.new(root)
            ]);

            // Create chart
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
            var chart = root.container.children.push(
                am5percent.PieChart.new(root, {
                    endAngle: 270
                })
            );

            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Series
            var series = chart.series.push(
                am5percent.PieSeries.new(root, {
                    valueField: "value",
                    categoryField: "category",
                    endAngle: 270
                })
            );

            series.states.create("hidden", {
                endAngle: -90
            });

            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Setting_data
            series.data.setAll([{
                category: "Ireland",
                value: irishCount
            }, {
                category: "USA",
                value: usaCount
            }]);

            series.appear(1000, 100);

            //-------------------------------
            // END OF PIE CHART Countries
            //------------------------------






            //-------------------------------
            // START OF PIE CHART OS VERSION
            //------------------------------

            // Create root element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root = am5.Root.new("chartdiv3");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root.setThemes([
                am5themes_Animated.new(root)
            ]);

            // Create chart
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
            var chart = root.container.children.push(
                am5percent.PieChart.new(root, {
                    endAngle: 270
                })
            );

            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Series
            var series = chart.series.push(
                am5percent.PieSeries.new(root, {
                    valueField: "value",
                    categoryField: "category",
                    endAngle: 270
                })
            );

            series.states.create("hidden", {
                endAngle: -90
            });

            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Setting_data
            series.data.setAll([{
                category: "Android 12",
                value: os12Count
            }, {
                category: "Android 11",
                value: os11Count
            }, {
                category: "Android 10",
                value: os10Count
            }, {
                category: "Android 9",
                value: os9Count
            }, {
                category: "Android 8",
                value: os8Count
            }]);

            series.appear(1000, 100);

            //-------------------------------
            // END OF PIE CHART OS VERSION
            //------------------------------


            //-------------------------------
            // START OF PIE CHART ERRORS
            //------------------------------

            // Create root element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root = am5.Root.new("chartdiv4");

            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root.setThemes([
                am5themes_Animated.new(root)
            ]);

            // Create chart
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/
            var chart = root.container.children.push(
                am5percent.PieChart.new(root, {
                    endAngle: 270
                })
            );

            // Create series
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Series
            var series = chart.series.push(
                am5percent.PieSeries.new(root, {
                    valueField: "value",
                    categoryField: "category",
                    endAngle: 270
                })
            );

            series.states.create("hidden", {
                endAngle: -90
            });

            // Set data
            // https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Setting_data
            series.data.setAll([{
                category: "java.lang.NullPointerException",
                value: nullPointerCount
            }, {
                category: "503 Service Unavailable",
                value: error503Count
            }]);

            series.appear(1000, 100);

            //-------------------------------
            // END OF PIE CHART ERRORS
            //------------------------------

        </script>